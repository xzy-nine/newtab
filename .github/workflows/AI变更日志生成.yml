name: AI变更日志生成
on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号（如v1.0.0）'
        required: true
        type: string
      release-id:
        description: 'Release ID（自动发布时填写）'
        required: false
        type: string
      tag:
        description: '要优化变更日志的标签（手动优化时填写）'
        required: false
        type: string

jobs:
  ai-changelog-generation:
    name: AI变更日志生成
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 验证输入参数
      id: validate-params
      run: |
        if [ -n "${{ inputs.release-id }}" ]; then
          echo "RUN_MODE=auto_release" >> $GITHUB_ENV
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          echo "RELEASE_ID=${{ inputs.release-id }}" >> $GITHUB_ENV
          echo "🤖 自动发布模式: 版本 ${{ inputs.version }}, Release ID ${{ inputs.release-id }}"
        elif [ -n "${{ inputs.tag }}" ]; then
          echo "RUN_MODE=manual_optimize" >> $GITHUB_ENV
          echo "VERSION=${{ inputs.tag }}" >> $GITHUB_ENV
          echo "📝 手动优化模式: 标签 ${{ inputs.tag }}"
        else
          echo "❌ 必须提供发布ID或标签参数之一"
          exit 1
        fi    
    - name: 获取Release信息
      id: get-release-info
      run: |
        if [ "${{ env.RUN_MODE }}" == "auto_release" ]; then
          # 通过Release ID获取信息
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}")
        else
          # 通过标签获取信息
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.VERSION }}")
        fi
        
        # 验证是否成功获取Release信息
        if [[ $(echo "$RELEASE_INFO" | jq -r 'has("id")') != "true" ]]; then
          echo "❌ 无法获取Release信息: $(echo "$RELEASE_INFO" | jq -r '.message // "未知错误"')"
          exit 1
        fi
        
        RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id')
        ORIGINAL_CHANGELOG=$(echo "$RELEASE_INFO" | jq -r '.body')
        
        echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
        echo "ORIGINAL_CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$ORIGINAL_CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "✅ 获取到Release信息，ID: $RELEASE_ID"
        echo "📋 原始变更日志长度: $(echo "$ORIGINAL_CHANGELOG" | wc -c) 字符"    
    - name: 检查是否已优化
      id: check-optimization-status
      run: |
        if [[ "$ORIGINAL_CHANGELOG" == *"[AI生成的变更日志摘要]"* ]]; then
          echo "⚠️ 此Release已包含AI生成的变更日志"
          if [ "${{ env.RUN_MODE }}" == "manual_optimize" ]; then
            echo "📝 手动模式，将重新生成AI变更日志"
            echo "NEED_OPTIMIZE=true" >> $GITHUB_ENV
          else
            echo "🤖 自动模式，跳过重复优化"
            echo "NEED_OPTIMIZE=false" >> $GITHUB_ENV
          fi
        else
          echo "✅ 可以进行AI优化"
          echo "NEED_OPTIMIZE=true" >> $GITHUB_ENV
        fi
    - name: 错峰时间检查
      id: off-peak-check
      if: env.NEED_OPTIMIZE == 'true'
      run: |
        # 错峰时间检查函数
        check_off_peak_time() {
          local hour=$(date -u +%H)
          local minute=$(date -u +%M)
          
          # 定义错峰时间段 (UTC时间)
          # 建议时间: 02:00-06:00 UTC (对应北京时间 10:00-14:00)
          if [ $hour -ge 2 ] && [ $hour -lt 6 ]; then
            return 0  # 错峰时间
          else
            return 1  # 非错峰时间
          fi
        }
          if [ "${{ env.RUN_MODE }}" == "auto_release" ]; then
          if check_off_peak_time; then
            echo "✅ 当前为错峰时间，可以继续执行"
            echo "CAN_EXECUTE=true" >> $GITHUB_ENV
          else
            echo "⏰ 当前为非错峰时间，延迟执行AI优化"
            echo "当前UTC时间: $(date -u)"
            echo "建议在 02:00-06:00 UTC 时间段执行"
            echo "CAN_EXECUTE=false" >> $GITHUB_ENV
            # 设置延迟作业
            echo "DELAY_HOURS=1" >> $GITHUB_ENV
          fi
        else
          echo "📝 手动模式，忽略错峰时间限制"
          echo "CAN_EXECUTE=true" >> $GITHUB_ENV
        fi    
    - name: 延迟等待
      if: env.NEED_OPTIMIZE == 'true' && env.CAN_EXECUTE == 'false'
      run: |
        echo "⏳ 等待 ${{ env.DELAY_HOURS }} 小时后重试..."
        sleep $((${{ env.DELAY_HOURS }} * 3600))
    - name: 获取详细提交信息
      id: get-detailed-commits
      if: env.NEED_OPTIMIZE == 'true' && (env.CAN_EXECUTE == 'true' || env.RUN_MODE == 'manual_optimize')
      run: |
        echo "📊 获取详细的提交信息..."
        
        # 获取上一个版本的标签
        LAST_TAG=$(git tag --sort=-version:refname | grep -v "^${{ env.VERSION }}$" | head -1)
        
        if [ -z "$LAST_TAG" ]; then
          echo "📋 首次发布，获取所有提交记录"
          COMMIT_RANGE=""
        else
          echo "📋 获取自 $LAST_TAG 以来的提交记录"
          COMMIT_RANGE="$LAST_TAG..${{ env.VERSION }}"
        fi
        
        # 获取详细的提交信息
        if [ -z "$COMMIT_RANGE" ]; then
          COMMITS_JSON=$(git log --pretty=format:'{"hash":"%H","short_hash":"%h","author":"%an","date":"%ad","message":"%s","body":"%b"}' --date=iso | jq -s '.')
        else
          COMMITS_JSON=$(git log $COMMIT_RANGE --pretty=format:'{"hash":"%H","short_hash":"%h","author":"%an","date":"%ad","message":"%s","body":"%b"}' --date=iso | jq -s '.')
        fi
        
        # 获取文件变更统计
        if [ -z "$COMMIT_RANGE" ]; then
          FILES_CHANGED=$(git diff --name-only --diff-filter=A HEAD | wc -l)
          FILES_MODIFIED=$(git diff --name-only --diff-filter=M HEAD | wc -l)
          FILES_DELETED=$(git diff --name-only --diff-filter=D HEAD | wc -l)
        else
          FILES_CHANGED=$(git diff --name-only --diff-filter=A $COMMIT_RANGE | wc -l)
          FILES_MODIFIED=$(git diff --name-only --diff-filter=M $COMMIT_RANGE | wc -l)
          FILES_DELETED=$(git diff --name-only --diff-filter=D $COMMIT_RANGE | wc -l)
        fi
        
        # 保存提交信息
        echo "COMMITS_JSON<<EOF" >> $GITHUB_ENV
        echo "$COMMITS_JSON" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "FILES_CHANGED=$FILES_CHANGED" >> $GITHUB_ENV
        echo "FILES_MODIFIED=$FILES_MODIFIED" >> $GITHUB_ENV
        echo "FILES_DELETED=$FILES_DELETED" >> $GITHUB_ENV
        
        COMMIT_COUNT=$(echo "$COMMITS_JSON" | jq length)
        echo "✅ 获取到 $COMMIT_COUNT 个提交记录"
        echo "📁 文件变更: 新增 $FILES_CHANGED, 修改 $FILES_MODIFIED, 删除 $FILES_DELETED"    
    - name: 分析提交类型
      id: analyze-commit-types
      if: env.NEED_OPTIMIZE == 'true' && (env.CAN_EXECUTE == 'true' || env.RUN_MODE == 'manual_optimize')
      run: |
        echo "🔍 分析提交类型..."
        
        # 使用jq分析提交消息的类型
        FEATURE_COUNT=$(echo "$COMMITS_JSON" | jq '[.[] | select(.message | test("^(feat|feature)"; "i"))] | length')
        BUG_COUNT=$(echo "$COMMITS_JSON" | jq '[.[] | select(.message | test("^(fix|bug)"; "i"))] | length')
        STYLE_COUNT=$(echo "$COMMITS_JSON" | jq '[.[] | select(.message | test("^(style|ui)"; "i"))] | length')
        REFACTOR_COUNT=$(echo "$COMMITS_JSON" | jq '[.[] | select(.message | test("^(refactor|refact)"; "i"))] | length')
        DOCS_COUNT=$(echo "$COMMITS_JSON" | jq '[.[] | select(.message | test("^(docs|doc)"; "i"))] | length')
        PERF_COUNT=$(echo "$COMMITS_JSON" | jq '[.[] | select(.message | test("^(perf|performance)"; "i"))] | length')
        TEST_COUNT=$(echo "$COMMITS_JSON" | jq '[.[] | select(.message | test("^(test|spec)"; "i"))] | length')
        CHORE_COUNT=$(echo "$COMMITS_JSON" | jq '[.[] | select(.message | test("^(chore|build|ci)"; "i"))] | length')
        
        echo "FEATURE_COUNT=$FEATURE_COUNT" >> $GITHUB_ENV
        echo "BUG_COUNT=$BUG_COUNT" >> $GITHUB_ENV
        echo "STYLE_COUNT=$STYLE_COUNT" >> $GITHUB_ENV
        echo "REFACTOR_COUNT=$REFACTOR_COUNT" >> $GITHUB_ENV
        echo "DOCS_COUNT=$DOCS_COUNT" >> $GITHUB_ENV
        echo "PERF_COUNT=$PERF_COUNT" >> $GITHUB_ENV
        echo "TEST_COUNT=$TEST_COUNT" >> $GITHUB_ENV
        echo "CHORE_COUNT=$CHORE_COUNT" >> $GITHUB_ENV
        
        echo "📊 提交类型统计:"
        echo "✨ 新功能: $FEATURE_COUNT"
        echo "🐛 bug修复: $BUG_COUNT"
        echo "💄 样式更新: $STYLE_COUNT"
        echo "♻️ 重构: $REFACTOR_COUNT"
        echo "📝 文档: $DOCS_COUNT"
        echo "⚡ 性能优化: $PERF_COUNT"
        echo "✅ 测试: $TEST_COUNT"
        echo "🔧 构建/工具: $CHORE_COUNT"    
    - name: 生成AI变更日志摘要
      id: generate-ai-summary
      if: env.NEED_OPTIMIZE == 'true' && (env.CAN_EXECUTE == 'true' || env.RUN_MODE == 'manual_optimize')
      run: |
        echo "🤖 开始生成AI变更日志摘要..."
        
        # 生成简洁的AI摘要
        AI_SUMMARY="## [AI生成的变更日志摘要]

        🎯 **本次更新亮点**"
        
        # 根据提交类型添加重点内容
        if [ $FEATURE_COUNT -gt 0 ]; then
          AI_SUMMARY="$AI_SUMMARY

        ✨ **新增功能 ($FEATURE_COUNT项)**
        - 基于提交记录，本版本新增了 $FEATURE_COUNT 个功能特性"
        fi
        
        if [ $BUG_COUNT -gt 0 ]; then
          AI_SUMMARY="$AI_SUMMARY

        🐛 **问题修复 ($BUG_COUNT项)**
        - 修复了 $BUG_COUNT 个已知问题，提升了系统稳定性"
        fi
        
        if [ $STYLE_COUNT -gt 0 ]; then
          AI_SUMMARY="$AI_SUMMARY

        💄 **界面优化 ($STYLE_COUNT项)**
        - 优化了用户界面和交互体验"
        fi
        
        if [ $PERF_COUNT -gt 0 ]; then
          AI_SUMMARY="$AI_SUMMARY

        ⚡ **性能提升 ($PERF_COUNT项)**
        - 进行了性能优化，提升了运行效率"
        fi
        
        # 添加技术细节
        AI_SUMMARY="$AI_SUMMARY

        📊 **更新统计**
        - 📝 提交记录: $(echo "$COMMITS_JSON" | jq length) 个
        - 📁 文件变更: 新增 $FILES_CHANGED 个，修改 $FILES_MODIFIED 个，删除 $FILES_DELETED 个
        - 🏷️ 版本标签: ${{ env.VERSION }}

        ---

        ### 详细变更记录
        $ORIGINAL_CHANGELOG"
        
        # 保存AI摘要
        echo "AI_SUMMARY<<EOF" >> $GITHUB_ENV
        echo "$AI_SUMMARY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "✅ AI变更日志摘要生成完成"
        echo "📝 摘要长度: $(echo "$AI_SUMMARY" | wc -c) 字符"    
    - name: 更新Release变更日志
      id: update-release-changelog
      if: env.NEED_OPTIMIZE == 'true' && (env.CAN_EXECUTE == 'true' || env.RUN_MODE == 'manual_optimize')
      run: |
        echo "📝 更新Release变更日志..."
        
        # 使用GitHub API更新Release
        UPDATE_RESPONSE=$(curl -s -X PATCH \
          -H "Authorization: token ${{ secrets.PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}" \
          -d "{\"body\": $(echo "$AI_SUMMARY" | jq -R -s '.')}")
        
        # 检查更新结果
        if [[ $(echo "$UPDATE_RESPONSE" | jq -r 'has("id")') == "true" ]]; then
          echo "✅ Release变更日志更新成功"
          echo "🔗 Release URL: $(echo "$UPDATE_RESPONSE" | jq -r '.html_url')"
          
          # 添加到作业摘要
          echo "## 🤖 AI变更日志生成完成" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 值 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 版本 | \`${{ env.VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Release ID | \`${{ env.RELEASE_ID }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 提交数量 | $(echo "$COMMITS_JSON" | jq length) |" >> $GITHUB_STEP_SUMMARY
          echo "| 文件变更 | 新增 $FILES_CHANGED, 修改 $FILES_MODIFIED, 删除 $FILES_DELETED |" >> $GITHUB_STEP_SUMMARY
          echo "| Release URL | [查看发布]($(echo "$UPDATE_RESPONSE" | jq -r '.html_url')) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Release变更日志更新失败"
          echo "错误信息: $(echo "$UPDATE_RESPONSE" | jq -r '.message // "未知错误"')"
          exit 1
        fi

    - name: 清理临时文件
      if: always()
      run: |
        echo "🧹 清理临时文件..."
        # 清理可能的临时文件
        find . -name "*.tmp" -delete 2>/dev/null || true
        echo "✅ 清理完成"
