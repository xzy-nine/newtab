name: AI变更日志生成
on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号(如v1.0.0）'
        required: true
        type: string
      release-id:,
        description: 'Release ID（自动发布时填写）'
        required: false
        type: string
      tag:
        description: '要优化变更日志的标签（手动优化时填写）'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: '版本号'
        required: true
        type: string
      release-id:
        description: 'Release ID'
        required: true
        type: string
    outputs:
      ai_optimized:
        description: "是否完成AI优化"
        value: ${{ jobs.ai-changelog-generation.outputs.ai_optimized }}

jobs:
  ai-changelog-generation:
    name: AI变更日志生成
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      ai_optimized: ${{ steps.update-release-changelog.outputs.ai_optimized }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 验证输入参数
      id: validate-params
      run: |
        echo "🔍 验证输入参数..."
        if [ "${{ github.event_name }}" == "workflow_call" ]; then
          echo "RUN_MODE=workflow_call" >> $GITHUB_ENV
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          echo "RELEASE_ID=${{ inputs.release-id }}" >> $GITHUB_ENV
          echo "🔗 工作流调用模式: 版本 ${{ inputs.version }}, Release ID ${{ inputs.release-id }}"
        elif [ -n "${{ inputs.release-id }}" ]; then
          echo "RUN_MODE=auto_release" >> $GITHUB_ENV
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          echo "RELEASE_ID=${{ inputs.release-id }}" >> $GITHUB_ENV
          echo "🤖 自动发布模式: 版本 ${{ inputs.version }}, Release ID ${{ inputs.release-id }}"
        elif [ -n "${{ inputs.tag }}" ]; then
          echo "RUN_MODE=manual_optimize" >> $GITHUB_ENV
          echo "VERSION=${{ inputs.tag }}" >> $GITHUB_ENV
          echo "📝 手动优化模式: 标签 ${{ inputs.tag }}"
        else
          echo "❌ 必须提供发布ID或标签参数之一"
          exit 1
        fi    

    - name: 获取Release信息
      id: get-release-info
      run: |
        if [ "${{ env.RUN_MODE }}" == "auto_release" ]; then
          # 通过Release ID获取信息
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}")
        else
          # 通过标签获取信息
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.VERSION }}")
        fi
        
        # 验证是否成功获取Release信息
        if [[ $(echo "$RELEASE_INFO" | jq -r 'has("id")') != "true" ]]; then
          echo "❌ 无法获取Release信息: $(echo "$RELEASE_INFO" | jq -r '.message // "未知错误"')"
          exit 1
        fi
        
        RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id')
        ORIGINAL_CHANGELOG=$(echo "$RELEASE_INFO" | jq -r '.body')
        
        echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
        echo "ORIGINAL_CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$ORIGINAL_CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "✅ 获取到Release信息，ID: $RELEASE_ID"
        echo "📋 原始变更日志长度: $(echo "$ORIGINAL_CHANGELOG" | wc -c) 字符"

    - name: 检查是否已优化
      id: check-optimization-status
      run: |
        echo "🔍 检查变更日志优化状态..."
        
        if [ "${{ env.RUN_MODE }}" == "manual_optimize" ]; then
          echo "📝 手动优化模式：强制重新生成，提取原始内容"
          echo "NEED_OPTIMIZE=true" >> $GITHUB_ENV
          echo "FORCE_REGENERATE=true" >> $GITHUB_ENV
          
          # 提取原始的提交记录
          echo "🔍 提取原始提交记录..."
          
          if [[ "$ORIGINAL_CHANGELOG" == *"<details>"*"查看原始提交记录"*"</details>"* ]]; then
            echo "📋 发现折叠区域，提取原始提交记录..."
            
            # 提取 <details> 标签内的内容
            EXTRACTED_CONTENT=$(echo "$ORIGINAL_CHANGELOG" | sed -n '/<details>/,/<\/details>/p')
            
            # 移除 <details>, <summary>, </summary>, </details> 标签
            CLEAN_ORIGINAL=$(echo "$EXTRACTED_CONTENT" | sed '/<details>/d' | sed '/<\/details>/d' | sed '/<summary>.*<\/summary>/d' | sed '/^$/d')
            
            # 如果提取的内容为空或只有空白，则从Git历史获取
            if [[ -z "$(echo "$CLEAN_ORIGINAL" | sed '/^[[:space:]]*$/d')" ]]; then
              echo "⚠️ 折叠区域内容为空，将从Git历史重新获取"
              CLEAN_ORIGINAL=""
            else
              echo "✅ 成功提取到原始提交记录"
            fi
          else
            echo "ℹ️ 未发现AI优化标记，使用原始内容"
            CLEAN_ORIGINAL="$ORIGINAL_CHANGELOG"
          fi
          
          # 更新环境变量
          echo "ORIGINAL_CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CLEAN_ORIGINAL" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "✅ 手动模式准备完成"
          
        else
          # 自动模式的原有逻辑
          if [[ "$ORIGINAL_CHANGELOG" == *"AI生成的变更日志摘要"* ]]; then
            echo "⚠️ 此Release已包含AI生成的变更日志"
            echo "🤖 自动模式，跳过重复优化"
            echo "NEED_OPTIMIZE=false" >> $GITHUB_ENV
          else
            echo "✅ 变更日志未经AI优化，可以进行优化"
            echo "NEED_OPTIMIZE=true" >> $GITHUB_ENV
          fi
        fi

    - name: 获取详细提交信息
      id: get-detailed-commits
      if: env.NEED_OPTIMIZE == 'true'
      run: |
        echo "📊 获取详细的提交信息..."
        
        # 获取Git提交历史
        CURRENT_TAG="${{ env.VERSION }}"
        echo "🎯 当前版本: $CURRENT_TAG"
        
        # 修复：获取上一个正确的版本标签，排除当前标签，并按版本号正确排序
        LAST_TAG=$(git tag --sort=-version:refname | grep -E '^v?[0-9]+\.[0-9]+(\.[0-9]+)?.*$' | grep -v "^$CURRENT_TAG$" | head -1)
        
        if [ -z "$LAST_TAG" ]; then
          echo "📋 首次发布，获取到当前版本的所有提交记录"
          # 获取当前标签的所有提交
          COMMITS=$(git log $CURRENT_TAG --pretty=format:'%h|%s|%b' --no-merges)
          COMMIT_RANGE="初始版本到$CURRENT_TAG"
        else
          echo "📋 获取 $LAST_TAG 到 $CURRENT_TAG 之间的提交记录"
          COMMIT_RANGE="$LAST_TAG..$CURRENT_TAG"
          COMMITS=$(git log $COMMIT_RANGE --pretty=format:'%h|%s|%b' --no-merges)
        fi
        
        # 修复：正确计算提交数量
        if [ -n "$COMMITS" ]; then
          COMMIT_COUNT=$(echo "$COMMITS" | grep -c "^[a-f0-9]" 2>/dev/null || echo "0")
        else
          COMMIT_COUNT=0
        fi
        
        echo "✅ 获取到 $COMMIT_COUNT 个提交记录"
        
        # 修复：如果没有获取到提交记录，尝试其他方法
        if [ "$COMMIT_COUNT" -eq 0 ]; then
          echo "⚠️ 未获取到提交记录，尝试其他方法..."
          
          # 检查当前标签是否存在
          if ! git rev-parse "$CURRENT_TAG" >/dev/null 2>&1; then
            echo "❌ 标签 $CURRENT_TAG 不存在"
            echo "可用的标签："
            git tag --sort=-version:refname | head -10
            exit 1
          fi
          
          # 如果有上一个标签，重新尝试获取
          if [ -n "$LAST_TAG" ]; then
            echo "🔄 重新尝试获取提交记录..."
            COMMITS=$(git log "$LAST_TAG..$CURRENT_TAG" --pretty=format:'%h|%s|%b' --no-merges)
            
            # 如果还是为空，尝试不同的范围
            if [ -z "$COMMITS" ]; then
              echo "🔄 尝试使用不同的提交范围..."
              # 获取两个标签之间的所有提交（包括合并提交）
              COMMITS=$(git log "$LAST_TAG..$CURRENT_TAG" --pretty=format:'%h|%s|%b')
              
              # 如果还是为空，获取最近的提交
              if [ -z "$COMMITS" ]; then
                echo "🔄 获取最近的提交记录..."
                COMMITS=$(git log --pretty=format:'%h|%s|%b' -n 20)
                COMMIT_RANGE="最近20个提交"
              fi
            fi
          else
            echo "🔄 获取当前标签的所有提交..."
            COMMITS=$(git log "$CURRENT_TAG" --pretty=format:'%h|%s|%b' --no-merges | head -20)
            COMMIT_RANGE="当前标签的所有提交"
          fi
          
          # 重新计算提交数量
          if [ -n "$COMMITS" ]; then
            COMMIT_COUNT=$(echo "$COMMITS" | grep -c "^[a-f0-9]" 2>/dev/null || echo "0")
          else
            COMMIT_COUNT=0
          fi
          echo "🔄 重新获取到 $COMMIT_COUNT 个提交记录"
        fi
        
        # 最终检查
        if [ "$COMMIT_COUNT" -eq 0 ] || [ -z "$COMMITS" ]; then
          echo "❌ 仍然无法获取到有效的提交记录"
          echo "🔍 调试信息："
          echo "  - 当前标签: $CURRENT_TAG"
          echo "  - 上一标签: $LAST_TAG"
          echo "  - 提交范围: $COMMIT_RANGE"
          echo "  - Git 仓库状态："
          git status --porcelain
          echo "  - 最近的标签（按版本排序）："
          git tag --sort=-version:refname | head -5
          echo "  - 当前分支："
          git branch --show-current
          
          # 作为最后的备选方案，获取最近的一些提交
          echo "🚨 使用备选方案：获取最近的提交记录"
          COMMITS=$(git log --oneline -n 10 --pretty=format:'%h|%s|%b')
          if [ -n "$COMMITS" ]; then
            COMMIT_COUNT=$(echo "$COMMITS" | grep -c "^[a-f0-9]" 2>/dev/null || echo "0")
          else
            COMMIT_COUNT=0
          fi
          COMMIT_RANGE="最近10个提交"
          echo "📋 备选方案获取到 $COMMIT_COUNT 个提交记录"
        fi
        
        # 修复：正确设置多行环境变量 - 确保内容不为空
        if [ -n "$COMMITS" ] && [ "$COMMIT_COUNT" -gt 0 ]; then
          # 保存原始提交数据
          echo "COMMITS_RAW<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "✅ 成功保存 $COMMIT_COUNT 个提交记录到环境变量"
          echo "📏 提交数据长度: $(echo "$COMMITS" | wc -c) 字符"
        else
          echo "❌ 无法获取有效的提交数据"
          # 设置空的环境变量
          echo "COMMITS_RAW=" >> $GITHUB_ENV
          exit 1
        fi
        
        # 保存原始变更日志用于折叠显示
        echo "RAW_ORIGINAL_FOR_COLLAPSE<<EOF" >> $GITHUB_ENV
        if [[ -n "$ORIGINAL_CHANGELOG" && "$ORIGINAL_CHANGELOG" != "null" && "$ORIGINAL_CHANGELOG" != "" ]]; then
          echo "$ORIGINAL_CHANGELOG"
        else
          echo "## 提交记录"
          echo ""
          if [[ -n "$COMMITS" && "$COMMIT_COUNT" -gt 0 ]]; then
            echo "$COMMITS" | while IFS='|' read -r hash message body; do
              if [[ -n "$hash" ]]; then
                echo "- **$message** \`$hash\`"
              fi
            done
          else
            echo "暂无提交记录"
          fi
        fi
        echo "EOF" >> $GITHUB_ENV
        
        # 保存变量到环境变量
        echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
        echo "COMMIT_RANGE=$COMMIT_RANGE" >> $GITHUB_ENV
        echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_ENV

    - name: 分析并生成AI变更日志
      id: generate-ai-changelog
      if: env.NEED_OPTIMIZE == 'true'
      run: |
        echo "🤖 开始生成精美的AI变更日志..."
        
        # 验证提交数据是否存在
        if [ -z "$COMMITS_RAW" ] || [ "${{ env.COMMIT_COUNT }}" = "0" ]; then
          echo "❌ 没有可用的提交数据，无法生成变更日志"
          echo "DEEPSEEK_API_SUCCESS=false" >> $GITHUB_ENV
          echo "DEEPSEEK_ERROR_MSG=没有可用的提交数据" >> $GITHUB_ENV
          exit 1
        fi
        
        echo "📊 验证提交数据: ${{ env.COMMIT_COUNT }} 个提交"
        echo "📏 原始数据长度: $(echo "$COMMITS_RAW" | wc -c) 字符"
        
        # 初始化AI调用状态
        echo "DEEPSEEK_API_SUCCESS=false" >> $GITHUB_ENV
        echo "DEEPSEEK_ERROR_MSG=" >> $GITHUB_ENV
        echo "DEEPSEEK_RAW_RESPONSE=" >> $GITHUB_ENV
        
        # 初始化各类别的提交数组
        declare -a FEATURE_COMMITS=()
        declare -a FIX_COMMITS=()
        declare -a STYLE_COMMITS=()
        declare -a REFACTOR_COMMITS=()
        declare -a PERF_COMMITS=()
        declare -a DOCS_COMMITS=()
        declare -a BUILD_COMMITS=()
        declare -a OTHER_COMMITS=()
        
        echo "🆕 处理Git历史提交记录..."
        
        # 统一处理Git历史记录
        while IFS='|' read -r hash message body; do
          if [[ -n "$hash" ]]; then
            # 清理消息内容
            clean_message=$(echo "$message" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
            
            # 分类提交
            if [[ "$clean_message" =~ ^(feat|feature|新增|添加) ]]; then
              FEATURE_COMMITS+=("$hash|$clean_message")
            elif [[ "$clean_message" =~ ^(fix|bug|修复|解决) ]]; then
              FIX_COMMITS+=("$hash|$clean_message")
            elif [[ "$clean_message" =~ ^(style|ui|样式|界面) ]]; then
              STYLE_COMMITS+=("$hash|$clean_message")
            elif [[ "$clean_message" =~ ^(refactor|重构) ]]; then
              REFACTOR_COMMITS+=("$hash|$clean_message")
            elif [[ "$clean_message" =~ ^(perf|performance|优化|性能) ]]; then
              PERF_COMMITS+=("$hash|$clean_message")
            elif [[ "$clean_message" =~ ^(docs|doc|文档) ]]; then
              DOCS_COMMITS+=("$hash|$clean_message")
            elif [[ "$clean_message" =~ ^(build|版本|构建) ]]; then
              BUILD_COMMITS+=("$hash|$clean_message")
            else
              OTHER_COMMITS+=("$hash|$clean_message")
            fi
          fi
        done <<< "$COMMITS_RAW"
        
        # 生成统计信息
        echo "📊 初步分类统计:"
        echo "  - 功能新增: ${#FEATURE_COMMITS[@]}"
        echo "  - 问题修复: ${#FIX_COMMITS[@]}"
        echo "  - 样式优化: ${#STYLE_COMMITS[@]}"
        echo "  - 代码重构: ${#REFACTOR_COMMITS[@]}"
        echo "  - 性能优化: ${#PERF_COMMITS[@]}"
        echo "  - 文档更新: ${#DOCS_COMMITS[@]}"
        echo "  - 构建相关: ${#BUILD_COMMITS[@]}"
        echo "  - 其他改进: ${#OTHER_COMMITS[@]}"
        
        # 准备所有提交信息给DeepSeek API分析
        ALL_COMMITS_FOR_AI=""
        for commit in "${FEATURE_COMMITS[@]}" "${FIX_COMMITS[@]}" "${STYLE_COMMITS[@]}" "${REFACTOR_COMMITS[@]}" "${PERF_COMMITS[@]}" "${DOCS_COMMITS[@]}" "${BUILD_COMMITS[@]}" "${OTHER_COMMITS[@]}"; do
          if [[ -n "$commit" ]]; then
            ALL_COMMITS_FOR_AI="${ALL_COMMITS_FOR_AI}${commit}\n"
          fi
        done
        
        # 验证要发送给AI的数据
        if [ -z "$ALL_COMMITS_FOR_AI" ]; then
          echo "❌ 没有有效的提交数据可发送给AI"
          echo "DEEPSEEK_ERROR_MSG=没有有效的提交数据可发送给AI" >> $GITHUB_ENV
        else
          echo "✅ 准备发送给AI的数据长度: $(echo -e "$ALL_COMMITS_FOR_AI" | wc -c) 字符"
          
          echo "🧠 调用DeepSeek API进行智能分析和优化..."
          
          # 转义特殊字符，防止JSON格式错误
          ESCAPED_COMMITS=$(echo -e "$ALL_COMMITS_FOR_AI" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/$/\\n/' | tr -d '\n')
          
          # 创建DeepSeek API请求
          cat > deepseek_request.json << EOF
        {
          "model": "deepseek-chat",
          "messages": [
            {
              "role": "system",
              "content": "你是一个专业的软件开发变更日志生成专家。请分析以下Git提交记录，对每个提交进行正确分类，并生成专业的变更日志。\\n\\n分类规则：\\n- FEATURE: 新功能、新特性\\n- FIX: Bug修复、问题解决\\n- STYLE: UI/UX改进、样式调整\\n- REFACTOR: 代码重构、结构优化\\n- PERF: 性能优化\\n- DOCS: 文档更新\\n- BUILD: 构建、版本、CI/CD相关\\n- OTHER: 其他类型\\n\\n要求：\\n1. 保留原始的Git哈希值\\n2. 如果初步分类不正确，请纠正\\n3. 生成简洁专业的描述\\n4. 按重要性排序\\n5. 使用中文输出"
            },
            {
              "role": "user",
              "content": "请分析以下提交记录并生成优化的变更日志：\\n\\n${ESCAPED_COMMITS}\\n\\n请按照JSON格式返回分析结果：\\n{\\n  \\\"categories\\\": {\\n    \\\"FEATURE\\\": [{\\\"hash\\\": \\\"commit_hash\\\", \\\"message\\\": \\\"优化后的描述\\\", \\\"importance\\\": 1-5}],\\n    \\\"FIX\\\": [...],\\n    \\\"STYLE\\\": [...],\\n    \\\"REFACTOR\\\": [...],\\n    \\\"PERF\\\": [...],\\n    \\\"DOCS\\\": [...],\\n    \\\"BUILD\\\": [...],\\n    \\\"OTHER\\\": [...]\\n  },\\n  \\\"summary\\\": \\\"版本整体改进摘要\\\",\\n  \\\"highlights\\\": [\\\"主要亮点1\\\", \\\"主要亮点2\\\"]\\n}"
            }
          ],
          "temperature": 0.3,
          "max_tokens": 4000
        }
        EOF
          
          # 验证生成的JSON文件
          if ! jq . deepseek_request.json > /dev/null 2>&1; then
            echo "❌ 生成的API请求JSON格式无效"
            echo "DEEPSEEK_ERROR_MSG=API请求JSON格式无效" >> $GITHUB_ENV
          else
            echo "✅ API请求JSON格式验证通过"
            
            # 调用DeepSeek API
            echo "📡 发送API请求..."
            DEEPSEEK_RESPONSE=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.DEEPSEEK_API_KEY }}" \
              -w "\nHTTP_STATUS:%{http_code}\n" \
              "https://api.deepseek.com/v1/chat/completions" \
              -d @deepseek_request.json)

            # 分离HTTP状态码和响应内容
            HTTP_STATUS=$(echo "$DEEPSEEK_RESPONSE" | grep "HTTP_STATUS:" | cut -d':' -f2)
            ACTUAL_RESPONSE=$(echo "$DEEPSEEK_RESPONSE" | sed '/HTTP_STATUS:/d')
            
            # 保存原始响应用于调试
            echo "DEEPSEEK_RAW_RESPONSE<<EOF" >> $GITHUB_ENV
            echo "$ACTUAL_RESPONSE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            echo "📊 API响应状态码: $HTTP_STATUS"
            
            # 检查HTTP状态码
            if [[ "$HTTP_STATUS" != "200" ]]; then
              ERROR_MSG="HTTP错误 $HTTP_STATUS: $(echo "$ACTUAL_RESPONSE" | jq -r '.error.message // .message // "未知HTTP错误"' 2>/dev/null || echo "响应解析失败")"
              echo "❌ API调用HTTP错误: $ERROR_MSG"
              echo "DEEPSEEK_ERROR_MSG=$ERROR_MSG" >> $GITHUB_ENV
              
            # 检查响应格式
            elif [[ -z "$ACTUAL_RESPONSE" ]]; then
              ERROR_MSG="API响应为空"
              echo "❌ $ERROR_MSG"
              echo "DEEPSEEK_ERROR_MSG=$ERROR_MSG" >> $GITHUB_ENV
              
            # 检查是否包含choices字段
            elif [[ $(echo "$ACTUAL_RESPONSE" | jq -r 'has("choices")' 2>/dev/null) != "true" ]]; then
              ERROR_MSG="API响应格式异常: $(echo "$ACTUAL_RESPONSE" | jq -r '.error.message // .message // "缺少choices字段"' 2>/dev/null || echo "JSON解析失败")"
              echo "❌ $ERROR_MSG"
              echo "DEEPSEEK_ERROR_MSG=$ERROR_MSG" >> $GITHUB_ENV
              
            else
              echo "✅ DeepSeek API调用成功"
              echo "DEEPSEEK_API_SUCCESS=true" >> $GITHUB_ENV
              
              # 提取AI分析结果
              AI_CONTENT=$(echo "$ACTUAL_RESPONSE" | jq -r '.choices[0].message.content' 2>/dev/null)
              
              if [[ -z "$AI_CONTENT" || "$AI_CONTENT" == "null" ]]; then
                ERROR_MSG="AI响应内容为空"
                echo "❌ $ERROR_MSG"
                echo "DEEPSEEK_ERROR_MSG=$ERROR_MSG" >> $GITHUB_ENV
                echo "DEEPSEEK_API_SUCCESS=false" >> $GITHUB_ENV
              else
                # 尝试解析JSON结果
                if echo "$AI_CONTENT" | jq . > /dev/null 2>&1; then
                  echo "📊 AI智能分析完成，开始生成优化变更日志..."
                  
                  # 保存AI分析结果
                  echo "$AI_CONTENT" > ai_analysis.json
                  
                  # 提取摘要和亮点
                  AI_SUMMARY=$(echo "$AI_CONTENT" | jq -r '.summary // "AI智能分析的版本更新"')
                  AI_HIGHLIGHTS=$(echo "$AI_CONTENT" | jq -r '.highlights[]?' 2>/dev/null || echo "")
                  
                  # 开始生成优化后的变更日志
                  AI_CHANGELOG="# 版本 ${{ env.VERSION }} 更新摘要 [AI生成的变更日志摘要]

               ## 📋 更新概览
               $AI_SUMMARY"
                  
                  # 添加主要亮点
                  if [[ -n "$AI_HIGHLIGHTS" ]]; then
                    AI_CHANGELOG="$AI_CHANGELOG

                ### ✨ 主要亮点"
                    while IFS= read -r highlight; do
                      if [[ -n "$highlight" ]]; then
                        AI_CHANGELOG="$AI_CHANGELOG
                 - $highlight"
                      fi
                    done <<< "$AI_HIGHLIGHTS"
                  fi
                  
                  AI_CHANGELOG="$AI_CHANGELOG

                     ---"
                  
                  # 按优先级生成各个分类
                  declare -a CATEGORIES=("FEATURE" "FIX" "PERF" "STYLE" "REFACTOR" "DOCS" "BUILD" "OTHER")
                  declare -A CATEGORY_TITLES=(
                    ["FEATURE"]="🚀 功能新增"
                    ["FIX"]="🐛 问题修复"
                    ["PERF"]="⚡ 性能优化"
                    ["STYLE"]="💄 样式优化"
                    ["REFACTOR"]="♻️ 代码重构"
                    ["DOCS"]="📝 文档更新"
                    ["BUILD"]="🏗️ 构建相关"
                    ["OTHER"]="🔧 其他改进"
                  )
                  
                  for category in "${CATEGORIES[@]}"; do
                    # 检查该分类是否有提交
                    CATEGORY_COMMITS=$(echo "$AI_CONTENT" | jq -r ".categories.$category[]?" 2>/dev/null)
                    
                    if [[ -n "$CATEGORY_COMMITS" ]]; then
                      AI_CHANGELOG="$AI_CHANGELOG

                    #### ${CATEGORY_TITLES[$category]}"
                      
                      # 按重要性排序并添加提交
                      echo "$AI_CONTENT" | jq -r ".categories.$category | sort_by(-.importance) | .[] | \"\\(.hash)|\\(.message)|\\(.importance)\"" | while IFS='|' read -r hash message importance; do
                        if [[ -n "$hash" && -n "$message" ]]; then
                          # 根据重要性添加不同的图标
                          case $importance in
                            5) icon="🔥" ;;
                            4) icon="⭐" ;;
                            3) icon="✨" ;;
                            2) icon="📌" ;;
                            1) icon="📍" ;;
                            *) icon="•" ;;
                          esac
                          
                          AI_CHANGELOG="$AI_CHANGELOG
                  - $icon **$message**  
                    \`$hash\`"
                        fi
                      done
                    fi
                  done
                  
                  echo "✅ AI优化变更日志生成完成"
                  
                else
                  ERROR_MSG="AI返回内容不是有效的JSON格式"
                  echo "⚠️ $ERROR_MSG，使用基础分析结果"
                  echo "🔍 AI原始返回内容前100字符: $(echo "$AI_CONTENT" | head -c 100)..."
                  echo "DEEPSEEK_ERROR_MSG=$ERROR_MSG" >> $GITHUB_ENV
                  
                  # 生成基础变更日志
                  AI_CHANGELOG="# 版本 ${{ env.VERSION }} 更新摘要 [AI生成的变更日志摘要]

                 ## 📋 更新概览
                 基于智能分析的版本更新

            "
                  
                  # 使用基础分类逻辑生成变更日志
                  if [ ${#FEATURE_COMMITS[@]} -gt 0 ]; then
                    AI_CHANGELOG="$AI_CHANGELOG

                 #### 🚀 功能新增"
                    
                    for commit in "${FEATURE_COMMITS[@]}"; do
                      IFS='|' read -r hash message <<< "$commit"
                      title=$(echo "$message" | sed 's/^feat[[:space:]]*:[[:space:]]*//' | sed 's/^feature[[:space:]]*:[[:space:]]*//' | sed 's/新增[[:space:]]*//' | sed 's/添加[[:space:]]*//')
                      AI_CHANGELOG="$AI_CHANGELOG
                   - **${title}**  
                    \`$hash\`"
                    done
                  fi
                  
                  if [ ${#FIX_COMMITS[@]} -gt 0 ]; then
                    AI_CHANGELOG="$AI_CHANGELOG

                 #### 🐛 问题修复"
                    
                    for commit in "${FIX_COMMITS[@]}"; do
                      IFS='|' read -r hash message <<< "$commit"
                      title=$(echo "$message" | sed 's/^fix[[:space:]]*:[[:space:]]*//' | sed 's/^bug[[:space:]]*:[[:space:]]*//' | sed 's/修复[[:space:]]*//' | sed 's/解决[[:space:]]*//')
                      AI_CHANGELOG="$AI_CHANGELOG
                   - **${title}**  
                  \`$hash\`"
                    done
                  fi
                  
                  # 其他分类的处理
                  if [ ${#OTHER_COMMITS[@]} -gt 0 ]; then
                    AI_CHANGELOG="$AI_CHANGELOG

                  #### 🔧 其他改进"
                    for commit in "${OTHER_COMMITS[@]}"; do
                      IFS='|' read -r hash message <<< "$commit"
                      AI_CHANGELOG="$AI_CHANGELOG
                      - **$(echo "$message" | sed 's/^[^:]*:[[:space:]]*//')**  
                     \`$hash\`"
                    done
                  fi
                fi
              fi
            fi
          fi
        fi
        
        # 如果API失败，使用基础逻辑作为后备方案
        if [[ "${{ env.DEEPSEEK_API_SUCCESS }}" != "true" ]]; then
          echo "🔄 使用基础逻辑生成变更日志..."
          
          AI_CHANGELOG="# 版本 ${{ env.VERSION }} 更新摘要 [AI生成的变更日志摘要]

                 ## 📋 更新概览
               基于规则分析的版本更新

              ---"
          
          # 基础分析逻辑
          if [ ${#FEATURE_COMMITS[@]} -gt 0 ]; then
            AI_CHANGELOG="$AI_CHANGELOG

             #### 🚀 功能新增"
            for commit in "${FEATURE_COMMITS[@]}"; do
              IFS='|' read -r hash message <<< "$commit"
              title=$(echo "$message" | sed 's/^feat[[:space:]]*:[[:space:]]*//' | sed 's/^feature[[:space:]]*:[[:space:]]*//' | sed 's/新增[[:space:]]*//' | sed 's/添加[[:space:]]*//')
              AI_CHANGELOG="$AI_CHANGELOG
             - **${title}**  
                \`$hash\`"
            done
          fi
          
          if [ ${#FIX_COMMITS[@]} -gt 0 ]; then
            AI_CHANGELOG="$AI_CHANGELOG

            #### 🐛 问题修复"
            for commit in "${FIX_COMMITS[@]}"; do
              IFS='|' read -r hash message <<< "$commit"
              title=$(echo "$message" | sed 's/^fix[[:space:]]*:[[:space:]]*//' | sed 's/^bug[[:space:]]*:[[:space:]]*//' | sed 's/修复[[:space:]]*//' | sed 's/解决[[:space:]]*//')
              AI_CHANGELOG="$AI_CHANGELOG
             - **${title}**  
              \`$hash\`"
            done
          fi
          
          # 处理其他分类
          if [ ${#OTHER_COMMITS[@]} -gt 0 ]; then
            AI_CHANGELOG="$AI_CHANGELOG

               #### 🔧 其他改进"
            for commit in "${OTHER_COMMITS[@]}"; do
              IFS='|' read -r hash message <<< "$commit"
              AI_CHANGELOG="$AI_CHANGELOG
            - **$(echo "$message" | sed 's/^[^:]*:[[:space:]]*//')**  
           \`$hash\`"
            done
          fi
        fi
        
        # 添加原始变更记录到折叠区域
        AI_CHANGELOG="$AI_CHANGELOG

           <details>
            <summary>查看原始提交记录</summary>

               $RAW_ORIGINAL_FOR_COLLAPSE

           </details>"
        
        # 保存生成的变更日志
        echo "AI_CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$AI_CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "✅ AI变更日志生成完成"
        echo "📝 变更日志长度: $(echo "$AI_CHANGELOG" | wc -c) 字符"
        
        # 清理临时文件
        rm -f deepseek_request.json ai_analysis.json 2>/dev/null || true

    - name: 更新Release变更日志
      id: update-release-changelog
      if: env.NEED_OPTIMIZE == 'true'
      run: |
        echo "📝 更新Release变更日志..."
        
        # 重新计算提交统计（因为变量作用域问题）
        FEATURE_COUNT=$(echo "$COMMITS_RAW" | grep -c "^[a-f0-9].*|.*\(feat\|feature\|新增\|添加\)" || echo "0")
        FIX_COUNT=$(echo "$COMMITS_RAW" | grep -c "^[a-f0-9].*|.*\(fix\|bug\|修复\|解决\)" || echo "0")
        STYLE_COUNT=$(echo "$COMMITS_RAW" | grep -c "^[a-f0-9].*|.*\(style\|ui\|样式\|界面\)" || echo "0")
        REFACTOR_COUNT=$(echo "$COMMITS_RAW" | grep -c "^[a-f0-9].*|.*\(refactor\|重构\)" || echo "0")
        PERF_COUNT=$(echo "$COMMITS_RAW" | grep -c "^[a-f0-9].*|.*\(perf\|performance\|优化\|性能\)" || echo "0")
        DOCS_COUNT=$(echo "$COMMITS_RAW" | grep -c "^[a-f0-9].*|.*\(docs\|doc\|文档\)" || echo "0")
        BUILD_COUNT=$(echo "$COMMITS_RAW" | grep -c "^[a-f0-9].*|.*\(build\|版本\|构建\)" || echo "0")
        TOTAL_COMMITS=$(echo "$COMMITS_RAW" | grep -c "^[a-f0-9]" || echo "0")
        OTHER_COUNT=$((TOTAL_COMMITS - FEATURE_COUNT - FIX_COUNT - STYLE_COUNT - REFACTOR_COUNT - PERF_COUNT - DOCS_COUNT - BUILD_COUNT))
        
        # 使用GitHub API更新Release
        UPDATE_RESPONSE=$(curl -s -X PATCH \
          -H "Authorization: token ${{ secrets.PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}" \
          -d "{\"body\": $(echo "$AI_CHANGELOG" | jq -R -s '.')}")
        
        # 检查更新结果
        if [[ $(echo "$UPDATE_RESPONSE" | jq -r 'has("id")') == "true" ]]; then
          echo "✅ Release变更日志更新成功"
          echo "🔗 Release URL: $(echo "$UPDATE_RESPONSE" | jq -r '.html_url')"
          echo "ai_optimized=true" >> $GITHUB_OUTPUT
          
          # 详细的作业摘要
          echo "## 🤖 AI变更日志生成完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 基本信息表格
          echo "### 📋 基本信息" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 值 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 运行模式 | \`${{ env.RUN_MODE }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 版本号 | \`${{ env.VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Release ID | \`${{ env.RELEASE_ID }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 是否强制重新生成 | \`${{ env.FORCE_REGENERATE }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Release URL | [查看发布]($(echo "$UPDATE_RESPONSE" | jq -r '.html_url')) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # AI API调用状态 - 包含详细错误信息
          echo "### 🤖 AI分析状态" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.DEEPSEEK_API_SUCCESS }}" == "true" ]; then
            echo "| DeepSeek API | ✅ 调用成功 |" >> $GITHUB_STEP_SUMMARY
            echo "| 生成方式 | 🧠 AI智能生成 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| DeepSeek API | ❌ 调用失败 |" >> $GITHUB_STEP_SUMMARY
            echo "| 生成方式 | 📝 基础规则生成 |" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ env.DEEPSEEK_ERROR_MSG }}" ]; then
              echo "| 失败原因 | ${{ env.DEEPSEEK_ERROR_MSG }} |" >> $GITHUB_STEP_SUMMARY
            fi
            
            # 添加原始响应调试信息（截取前200字符）
            if [ -n "${{ env.DEEPSEEK_RAW_RESPONSE }}" ]; then
              RAW_PREVIEW=$(echo "${{ env.DEEPSEEK_RAW_RESPONSE }}" | head -c 200)
              echo "| API原始响应 | \`${RAW_PREVIEW}...\` |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 提交统计信息
          echo "### 📊 提交统计" >> $GITHUB_STEP_SUMMARY
          echo "| 分类 | 数量 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 功能新增 | $FEATURE_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐛 问题修复 | $FIX_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| 💄 样式优化 | $STYLE_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| ♻️ 代码重构 | $REFACTOR_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚡ 性能优化 | $PERF_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 文档更新 | $DOCS_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ 构建相关 | $BUILD_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧 其他改进 | $OTHER_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| **总计** | **$TOTAL_COMMITS** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 变更日志长度对比
          ORIGINAL_LENGTH=$(echo "$ORIGINAL_CHANGELOG" | wc -c)
          AI_LENGTH=$(echo "$AI_CHANGELOG" | wc -c)
          echo "### 📏 变更日志优化" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 字符数 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 原始变更日志 | $ORIGINAL_LENGTH |" >> $GITHUB_STEP_SUMMARY
          echo "| AI优化后 | $AI_LENGTH |" >> $GITHUB_STEP_SUMMARY
          if [ $ORIGINAL_LENGTH -gt 0 ]; then
            echo "| 增长率 | $(( (AI_LENGTH - ORIGINAL_LENGTH) * 100 / ORIGINAL_LENGTH ))% |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 增长率 | N/A（原始为空） |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # AI失败时显示更多调试信息
          if [ "${{ env.DEEPSEEK_API_SUCCESS }}" != "true" ]; then
            echo "### 🔍 调试信息" >> $GITHUB_STEP_SUMMARY
            echo "| 项目 | 信息 |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|" >> $GITHUB_STEP_SUMMARY
            echo "| API密钥配置 | $(if [ -n "${{ secrets.DEEPSEEK_API_KEY }}" ]; then echo "✅ 已配置"; else echo "❌ 未配置"; fi) |" >> $GITHUB_STEP_SUMMARY
            echo "| 请求数据大小 | $(wc -c < deepseek_request.json 2>/dev/null || echo "N/A") 字节 |" >> $GITHUB_STEP_SUMMARY
            echo "| 提交数据量 | ${#ALL_COMMITS_FOR_AI} 字符 |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 如果AI分析结果存在，显示AI分析的亮点
          if [[ -f "ai_analysis.json" ]]; then
            AI_HIGHLIGHTS=$(cat ai_analysis.json | jq -r '.highlights[]?' 2>/dev/null || echo "")
            if [[ -n "$AI_HIGHLIGHTS" ]]; then
              echo "### ✨ AI识别的主要亮点" >> $GITHUB_STEP_SUMMARY
              while IFS= read -r highlight; do
                if [[ -n "$highlight" ]]; then
                  echo "- $highlight" >> $GITHUB_STEP_SUMMARY
                fi
              done <<< "$AI_HIGHLIGHTS"
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            AI_SUMMARY=$(cat ai_analysis.json | jq -r '.summary // ""' 2>/dev/null)
            if [[ -n "$AI_SUMMARY" && "$AI_SUMMARY" != "null" ]]; then
              echo "### 🧠 AI生成的版本摘要" >> $GITHUB_STEP_SUMMARY
              echo "> $AI_SUMMARY" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # 显示处理的提交范围
          echo "### 🎯 处理范围" >> $GITHUB_STEP_SUMMARY
          echo "- **当前版本**: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          if [[ -n "${{ env.LAST_TAG }}" ]]; then
            echo "- **上一版本**: ${{ env.LAST_TAG }}" >> $GITHUB_STEP_SUMMARY
            echo "- **提交范围**: ${{ env.COMMIT_RANGE }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **提交范围**: 从首次提交到当前版本" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **处理的提交数**: ${{ env.COMMIT_COUNT }} 个" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 运行时间信息
          echo "### ⏱️ 执行信息" >> $GITHUB_STEP_SUMMARY
          echo "- **执行时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **工作流**: [\`${{ github.workflow }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- **提交SHA**: [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          
          # 成功状态
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.DEEPSEEK_API_SUCCESS }}" == "true" ]; then
            echo "✅ **状态**: AI变更日志生成并更新成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **状态**: 变更日志生成并更新成功（使用基础规则，AI分析失败）" >> $GITHUB_STEP_SUMMARY
          fi
          
        else
          echo "❌ Release变更日志更新失败"
          echo "错误信息: $(echo "$UPDATE_RESPONSE" | jq -r '.message // "未知错误"')"
          echo "ai_optimized=false" >> $GITHUB_OUTPUT
          
          # 失败时的详细摘要
          echo "## ❌ AI变更日志生成失败" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Release更新失败的详细信息
          echo "### 🚨 Release更新失败" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 值 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 错误信息 | $(echo "$UPDATE_RESPONSE" | jq -r '.message // "未知错误"') |" >> $GITHUB_STEP_SUMMARY
          echo "| Release ID | ${{ env.RELEASE_ID }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 版本号 | ${{ env.VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 运行模式 | ${{ env.RUN_MODE }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # AI分析状态（即使Release更新失败也显示）
          echo "### 🤖 AI分析状态" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.DEEPSEEK_API_SUCCESS }}" == "true" ]; then
            echo "| DeepSeek API | ✅ 调用成功 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| DeepSeek API | ❌ 调用失败 |" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ env.DEEPSEEK_ERROR_MSG }}" ]; then
              echo "| AI失败原因 | ${{ env.DEEPSEEK_ERROR_MSG }} |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 执行信息
          echo "### ⏱️ 执行信息" >> $GITHUB_STEP_SUMMARY
          echo "- **执行时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **工作流**: [\`${{ github.workflow }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          
          exit 1
        fi

    - name: 清理临时文件
      if: always()
      run: |
        echo "🧹 清理临时文件..."
        find . -name "*.tmp" -delete 2>/dev/null || true
        echo "✅ 清理完成"