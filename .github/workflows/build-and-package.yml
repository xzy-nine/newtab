name: Build and Package  # 构建和打包工作流

on:
  push:
    branches:
      - main  # 当代码推送到 main 分支时自动触发
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest  # 在最新版本的 Ubuntu 运行环境中执行
    # 添加权限配置:
    permissions:
      contents: write
      packages: write
      issues: write  # 添加这一行,

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      # 检出仓库代码到运行环境中，确保工作流可以访问最新的代码

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
      # 配置 Node.js 运行环境，选择 v14 版本以确保项目依赖兼容性

    - name: Install dependencies
      run: npm install
      # 安装项目所需的 npm 依赖包，确保构建环境完整

    - name: Get version from manifest.json
      id: get_version
      run: |
        VERSION=$(jq -r '.version' manifest.json)
        # 验证版本号格式是否符合 x.y.z 规范
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Invalid version format in manifest.json"
          exit 1
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
      # 从项目的 manifest.json 中提取版本号并存储为环境变量，用于后续的版本控制

    - name: Get latest release version
      id: get_latest_release
      run: |
        # 处理首次发布的情况
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name // "0.0.0"')
        if [[ ! $LATEST_RELEASE =~ ^[0-9]+\.[0-9]+\.[0-9]+(_DEBUG)?$ ]]; then
          LATEST_RELEASE="0.0.0"
        fi
        echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
      # 通过 GitHub API 获取仓库最新发布版本号，用于版本比较和发布控制
    - name: Compare ver,ions
      id: compare_versions
      run: |
        # 添加版本号格式验证函数
        validate_version() {,
          if [[ ! $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+(_DEBUG)?$ ]]; then
            echo "Error: Invali. version format: $1"
            return 1
          fi
          return 0
        }
        
        # 验证两个版本号
        validate_version "${{ env.VERSION }}" || exit 1
        validate_version "${{ env.LATEST_RELEASE }}" || exit 1
        
        # 确保版本号存在
        if [ -z "${{ env.VERSION }}" ] || [ -z "${{ env.LATEST_RELEASE }}" ]; then
          echo "Error: Missing version information"
          exit 1
        fi
        
        # 提取不带 _DEBUG 的版本号进行比较
        CURRENT_VER=$(echo ${{ env.VERSION }} | sed 's/_DEBUG$//')
        LATEST_VER=$(echo ${{ env.LATEST_RELEASE }} | sed 's/_DEBUG$//')
        
        # 确保版本号格式正确
        if [[ ! $CURRENT_VER =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || [[ ! $LATEST_VER =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Invalid version format"
          exit 1
        fi
        
        # 语义化版本号比较
        if [ $(printf '%s\n' "$LATEST_VER" "$CURRENT_VER" | sort -V | tail -n1) = "$CURRENT_VER" ]; then
          echo "NEW_VERSION=true" >> $GITHUB_ENV
        else
          echo "NEW_VERSION=false" >> $GITHUB_ENV
        fi

    - name: Set release name
      id: set_release_name
      run: |
        if [ "${{ env.NEW_VERSION }}" = "false" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "RELEASE_NAME=${VERSION}_DEBUG" >> $GITHUB_ENV
          echo "TAG_NAME=${VERSION}_DEBUG" >> $GITHUB_ENV
        else
          echo "RELEASE_NAME=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=$VERSION" >> $GITHUB_ENV
        fi
      # 设置发布标签和名称
      # 如果是手动触发且版本号未变化，添加 _DEBUG 后缀用于调试版本
      # 否则使用 manifest.json 中的原始版本号

    - name: Check recent notifications and gather changes
      if: ${{ env.NEW_VERSION == 'false' && github.event_name == 'push' }}
      uses: actions/github-script@v6
      id: check_notifications
      with:
        script: |
          const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
          
          // 搜索最近24小时内的通知issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'all',
            labels: '版本未更新',
            since: twentyFourHoursAgo.toISOString()
          });
          
          // 获取最近一次通知的时间
          let lastNotificationTime = twentyFourHoursAgo;
          if (issues.data.length > 0) {
            lastNotificationTime = new Date(issues.data[0].created_at);
          }
          
          // 获取从上次通知到现在的所有提交
          const commits = await github.rest.repos.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            since: lastNotificationTime.toISOString(),
            until: new Date().toISOString()
          });
          
          // 整理所有变更信息
          const changes = commits.data.map(commit => ({
            message: commit.commit.message,
            author: commit.commit.author.name,
            timestamp: commit.commit.author.date,
            url: commit.html_url,
            // 获取修改的文件
            files: commit.files ? commit.files.map(f => f.filename).join('\n') : ''
          }));
          
          return {
            hasRecentNotification: issues.data.length > 0,
            changes: changes
          };

    - name: Create or update notification issue
      if: ${{ github.event_name == 'push' }}
      uses: actions/github-script@v6
      with:
        script: |
          const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
          
          // 搜索现有的追踪 issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['通知']
          });
          
          const TRACKING_ISSUE_TITLE = process.env.NEW_VERSION === 'true' 
            ? '🎉 版本更新追踪' 
            : '📝 代码更新追踪';
          
          // 查找对应类型的追踪 issue
          const existingIssue = issues.data.find(issue => issue.title === TRACKING_ISSUE_TITLE);
          
          // 获取当前提交的信息
          const commit = context.payload.commits[0];
          const updateInfo = [
            '### 更新记录 (' + new Date().toISOString() + ')',
            '',
            '#### 提交信息',
            `\`\`\``,
            commit.message,
            `\`\`\``,
            '',
            '#### 更改的文件',
            '```',
            (commit.modified || []).join('\n'),
            '```',
            '',
            '#### 提交详情',
            `- 提交者：${commit.author.name}`,
            `- 提交时间：${commit.timestamp}`,
            `- 提交 SHA：${commit.id}`,
            `- 查看变更：${commit.url}`,
            '',
            '---',
            ''
          ].join('\n');

          if (existingIssue) {
            const lastUpdateTime = new Date(existingIssue.updated_at);
            if (lastUpdateTime < twentyFourHoursAgo) {
              // 如果超过24小时，添加新评论
              const commentBody = [
                `## ${new Date().toLocaleString('zh-CN', { timeZone: 'Asia/Shanghai' })} 的更新`,
                '',
                updateInfo,
                '',
                process.env.NEW_VERSION === 'true' 
                  ? '> 🎉 这是一个新版本更新通知。'
                  : '> ℹ️ 这是一个代码更新通知，但版本号未更新。'
              ].join('\n');

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: commentBody
              });
            }
            // 如果在24小时内，不做任何操作
          } else {
            // 创建新的追踪 issue
            const initialBody = [
              '# ' + (process.env.NEW_VERSION === 'true' ? '版本更新追踪' : '代码更新追踪'),
              '',
              '此 Issue 用于追踪代码更新，将在24小时后开始记录新的更新。',
              '',
              '## 当前版本信息',
              `- 当前版本号：\`${process.env.VERSION}\``,
              `- 上次版本号：\`${process.env.LATEST_RELEASE}\``,
              '',
              '## 首次更新记录',
              '',
              updateInfo,
              '',
              process.env.NEW_VERSION === 'true'
                ? '> 🎉 这是一个版本更新追踪 issue。'
                : '> ℹ️ 这是一个代码更新追踪 issue。如需发布新版本，请更新 manifest.json 中的版本号。'
            ].join('\n');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: TRACKING_ISSUE_TITLE,
              body: initialBody,
              labels: ['通知', process.env.NEW_VERSION === 'true' ? '版本更新' : '代码更新']
            });
          }

    - name: Check and update version notification issue
      if: ${{ env.NEW_VERSION == 'false' && github.event_name == 'push' }}
      uses: actions/github-script@v6
      with:
        script: |
          try {
            // 查找是否存在版本更新通知 issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['版本更新通知']
            });
            
            // 查找特定标题的issue
            const notificationIssue = issues.data.find(issue => 
              issue.title === '📝 版本更新通知追踪'
            );
            
            // 创建更新内容
            const modified = context.payload.commits[0].modified || [];
            const updateInfo = [
              '### 更新记录 (' + new Date().toISOString() + ')',
              '',
              '#### 提交信息',
              context.payload.commits[0].message,
              '',
              '#### 更改的文件',
              '```',
              modified.join('\n'),
              '```',
              '',
              '#### 提交详情',
              '- 提交者：' + context.payload.commits[0].author.name,
              '- 提交时间：' + context.payload.commits[0].timestamp,
              '- 查看变更：' + context.payload.commits[0].url,
              '',
              '---',
              ''
            ].join('\n');
            
            // 如果没有找到通知 issue，创建一个新的
            if (!notificationIssue) {
              const initialBody = [
                '# 版本更新通知追踪',
                '',
                '此 Issue 用于追踪所有未更新版本号的代码变更。',
                '',
                '## 当前版本信息',
                '- 当前版本号：`' + process.env.VERSION + '`',
                '- 上次版本号：`' + process.env.LATEST_RELEASE + '`',
                '',
                '> **提示：** 如需发布新版本，请更新 manifest.json 中的版本号。',
                '',
                '## 变更记录',
                '',
                updateInfo
              ].join('\n');

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '📝 版本更新通知追踪',
                body: initialBody,
                labels: ['版本更新通知']
              });
            } else {
              // 更新现有 issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: notificationIssue.number,
                body: notificationIssue.body + '\n' + updateInfo
              });
            }
          } catch (error) {
            console.error('Error updating notification issue:', error);
            return;
          }

    - name: Set repository name
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

    - name: Create and move zip package
      # 修改条件：只在是新版本或手动触发且为调试版本时打包
      if: ${{ env.NEW_VERSION == 'true' || (github.event_name == 'workflow_dispatch' && env.NEW_VERSION == 'false') }}
      run: |
        set -e  # 添加这行使脚本在遇到错误时立即退出
        
        # 使用环境变量 REPO_NAME
        mkdir -p build
        
        zip -r "${{ env.REPO_NAME }}-${{ env.RELEASE_NAME }}.zip" . -x "README.md" -x "build/*" -x ".github/*" -x ".git/*"
        
        mv "${{ env.REPO_NAME }}-${{ env.RELEASE_NAME }}.zip" build/
        
        if [ ! -f "build/${{ env.REPO_NAME }}-${{ env.RELEASE_NAME }}.zip" ]; then
          echo "Error: Failed to create zip package"
          exit 1
        fi
        
        # 将build目录添加到git
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git add build/
        git commit -m "chore: update build artifacts for version ${{ env.RELEASE_NAME }}"
        git push
      # 打包项目文件
      # 1. 创建 build 目录
      # 2. 将项目文件打包成 zip，排除文档和构建相关文件
      # 3. 移动压缩包到 build 目录
      # 仅在手动触发或版本号更新时执行

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "refs/tags/${{ env.TAG_NAME }}" >/dev/null 2>&1; then
          echo "TAG_EXISTS=true" >> $GITHUB_ENV
        else
          echo "TAG_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Delete existing tag if exists
      if: ${{ env.TAG_EXISTS == 'true' }}
      run: |
        git tag -d ${{ env.TAG_NAME }} || true
        git push --delete origin ${{ env.TAG_NAME }} || true

    - name: Create Release
      id: create_release
      if: ${{ (env.NEW_VERSION == 'true' || (github.event_name == 'workflow_dispatch' && env.NEW_VERSION == 'false')) && env.TAG_EXISTS == 'false' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: ${{ env.RELEASE_NAME }}
        draft: false
        prerelease: ${{ env.NEW_VERSION != 'true' }}
        body: |
          ${{ env.NEW_VERSION == 'true' && format('
          # 发布说明
          
          此版本将在[Microsoft Edge 扩展商店](https://microsoftedge.microsoft.com/addons/detail/xzy%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5%E6%8B%93%E5%B1%95/lpdhbhkcbnhldcpcbocplhgeooabhbme)发布。

          ### 更新内容

          - 版本号：{0}
          - 发布时间：{1}
          
          ---
          ', env.VERSION, github.event.head_commit.timestamp) || format('
          # 调试版本
          
          这是一个调试版本（{0}），仅用于测试。
          ', env.RELEASE_NAME) }}
      # 创建 GitHub Release
      # 1. 使用配置的版本标签和名称
      # 2. 设置为预发布状态，允许后续更新
      # 3. 自动使用 GitHub Token 进行认证
      # 仅在手动触发或版本号更新时执行

    - name: Upload Release Asset
      if: ${{ env.NEW_VERSION == 'true' || (github.event_name == 'workflow_dispatch' && env.NEW_VERSION == 'false') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/${{ env.REPO_NAME }}-${{ env.RELEASE_NAME }}.zip
        asset_name: ${{ env.REPO_NAME }}-${{ env.RELEASE_NAME }}.zip
        asset_content_type: application/zip
      continue-on-error: true
      # 上传发布资产
      # 1. 将构建的 zip 包上传到刚创建的 Release
      # 2. 使用前一步骤返回的上传 URL
      # 3. 设置正确的内容类型
      # 仅在手动触发或版本号更新时执行