name: Build and Package

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: 从 manifest.json 获取版本信息
      id: get_version
      run: |
        VERSION=$(jq -r '.version' manifest.json)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: 获取最新发布版本
      id: get_latest_release
      run: |
        LATEST_VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name' || echo "0.0.0")
        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

    - name: 比较版本
      id: compare_versions
      run: |
        if [ "$(printf '%s\n' "$LATEST_VERSION" "$VERSION" | sort -rV | head -n1)" = "$VERSION" ]; then
            echo "new_version=true" >> $GITHUB_ENV
        else
            echo "new_version=false" >> $GITHUB_ENV
        fi

    - name: 检查标签是否存在
      id: check_tag
      run: |
        if git rev-parse "refs/tags/${{ env.VERSION }}" >/dev/null 2>&1; then
          echo "tag_exists=true" >> $GITHUB_ENV
        else
          echo "tag_exists=false" >> $GITHUB_ENV
        fi

    - name: 生成变更日志
      id: generate_changelog
      run: |
        if [ "${{ env.new_version }}" = "true" ] && [ "${{ env.tag_exists }}" = "false" ]; then
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"%h - %s")
          else
            CHANGELOG=$(git log --pretty=format:"%h - %s" $LAST_TAG..HEAD)
          fi
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="没有新的变更记录"
          fi
          CHANGELOG=$(echo "$CHANGELOG" | sed 's/ \([0-9a-f]\{7\} - \)/\n\1/g' | sed 's/\(fix\|add\|style\|update\)/\n\1/g')
          CHANGELOG=$(echo "$CHANGELOG" | jq -R -s '.')
          echo "CHANGELOG=$CHANGELOG" >> $GITHUB_ENV
        fi

    - name: 创建并复制 zip 包
      if: env.new_version == 'true' && env.tag_exists == 'false'
      run: |
        zip -r newtab-${{ env.VERSION }}.zip . -x ".*" -x "*/.*" -x "build/*" -x "README.md" -x ".github/*"
        mkdir -p build
        cp newtab-${{ env.VERSION }}.zip build/
        cp newtab-${{ env.VERSION }}.zip $GITHUB_WORKSPACE/build/

    - name: 创建 Release
      if: env.new_version == 'true' && env.tag_exists == 'false'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: ${{ fromJson(env.CHANGELOG) }}
        draft: false
        prerelease: false

    - name: 上传 Release 资源
      if: env.new_version == 'true' && env.tag_exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/newtab-${{ env.VERSION }}.zip
        asset_name: newtab-${{ env.VERSION }}.zip
        asset_content_type: application/zip