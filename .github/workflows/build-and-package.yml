name: auto Build and Package  # 自动构建和打包工作流

on:
  push:
    branches:
      - main

jobs:
  build:
    timeout-minutes: 15  # 添加超时设置
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    permissions:
      contents: write
      packages: write
      actions: read

    steps:
      # B: 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史记录用于生成变更日志

      - name: Cache Dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            build
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # C: 设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'  # 添加缓存支持

      # C: 安装依赖
      - name: Install Dependencies
        run: |
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found"
            exit 1
          fi
          npm ci  # 使用 ci 替代 install 以确保一致性

      # D: 从 manifest.json 获取版本信息
      - name: Get version from manifest.json
        id: get_version
        run: |
          if [ ! -f "manifest.json" ]; then
            echo "Error: manifest.json not found"
            exit 1
          fi
          VERSION=$(jq -r '.version' manifest.json)
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format in manifest.json"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # E: 获取最新发布版本
      - name: Get Latest Release Version
        id: get_latest_release
        run: |
          RESPONSE=$(curl -s -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/latest)
          HTTP_CODE=$(tail -n1 <<< "$RESPONSE")
          CONTENT=$(sed '$ d' <<< "$RESPONSE")
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Warning: Failed to get latest release, using 0.0.0"
            echo "latest_release=0.0.0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          LATEST_RELEASE=$(echo "$CONTENT" | jq -r '.tag_name // "0.0.0"')
          echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      # F: 比较版本
      - name: Compare Versions
        id: compare_versions
        run: |
          # 安装 semver 工具
          npm install -g semver
          
          CURRENT_VER="${{ steps.get_version.outputs.version }}"
          LATEST_VER="${{ steps.get_latest_release.outputs.latest_release }}"
          
          # 当前逻辑有重复判断，可以简化为:
          if ! semver "$CURRENT_VER" >/dev/null 2>&1 || ! semver "$LATEST_VER" >/dev/null 2>&1; then
            echo "Error: Invalid version format"
            exit 1
          fi
          
          if semver -r "> $LATEST_VER" "$CURRENT_VER" >/dev/null; then
            echo "Found new version, continuing workflow..."
            echo "new_version=true" >> $GITHUB_OUTPUT
          else
            echo "No new version detected, stopping workflow..."
            echo "new_version=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 更严格的版本格式验证
          if [[ ! "$CURRENT_VER" =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$ ]]; then
            echo "Error: Invalid current version format: $CURRENT_VER"
            exit 1
          fi

      # G: 生成变更日志
      - name: Generate Changelog
        if: steps.compare_versions.outputs.new_version == 'true'
        id: changelog
        run: |
          LATEST_TAG="${{ steps.get_latest_release.outputs.latest_release }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          
          if [ -z "$LATEST_TAG" ]; then
            echo "Error: Latest release version is empty"
            exit 1
          fi
          
          if ! git rev-parse "$LATEST_TAG" >/dev/null 2>&1; then
            echo "Warning: Tag $LATEST_TAG not found, using first commit"
            LATEST_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          if ! CHANGELOG=$(git log "$LATEST_TAG"..HEAD --merges --pretty=format:"[#%h]($REPO_URL/commit/%H) - %s"); then
            echo "Warning: Failed to generate changelog"
            CHANGELOG="No changes"
          fi
          
          # 如果日志为空,显示"No changes"而不是使用所有提交
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="No changes"
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # H: 验证必要文件
      - name: Verify Required Files
        if: steps.compare_versions.outputs.new_version == 'true'
        run: |
          required_files=("manifest.json" "package.json")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file not found"
              exit 1
            fi
          done

      # I: 创建并移动 zip 包
      - name: Create and Move Zip Package
        if: steps.compare_versions.outputs.new_version == 'true'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          # 清理并创建构建目录
          rm -rf build
          mkdir -p build
          
          # 创建临时目录用于打包
          TMP_DIR=$(mktemp -d)
          cp -r . "$TMP_DIR/"
          cd "$TMP_DIR"
          
          # 移除不需要的文件和目录
          rm -rf \
            README.md \
            build \
            .github \
            .git \
            node_modules \
            *.log \
            .gitignore \
            package-lock.json
          
          # 创建 zip 包
          zip -r "$REPO_NAME-$VERSION.zip" .
          mv "$REPO_NAME-$VERSION.zip" ../build/
          cd ..
          rm -rf "$TMP_DIR"
          
          # 验证 zip 包
          if [ ! -f "build/$REPO_NAME-$VERSION.zip" ]; then
            echo "Error: Failed to create zip package"
            exit 1
          fi

      # J: 创建 Release
      - name: Set Release Time
        run: echo "RELEASE_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Create Release
        if: steps.compare_versions.outputs.new_version == 'true'
        id: create_release  # 添加这行
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            Release ${{ steps.get_version.outputs.version }}
            
            Changes in this release:
            ${{ steps.changelog.outputs.changelog }}
            
            自动发布时间: ${{ env.RELEASE_TIME }}
          draft: false
          prerelease: false

      # K: 上传 Release 资源
      - name: Upload Release Asset
        if: steps.compare_versions.outputs.new_version == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/${{ github.event.repository.name }}-${{ steps.get_version.outputs.version }}.zip
          asset_name: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip

      # L: 错误通知
      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const run_id = context.runId;
            const run_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
            const workflow_name = context.workflow;
            const run_number = context.runNumber;
            const message = `⚠️ Workflow failed!
              Repository: ${owner}/${repo}
              Workflow: ${workflow_name}
              Run #: ${run_number}
              Run URL: ${run_url}
              Failure Time: ${new Date().toISOString()}`;
            
            await github.rest.issues.create({
              owner,
              repo,
              title: `🚨 Workflow Failed - Run #${run_number}`,
              body: message,
              labels: ['workflow-failed', 'automated-report']
            });

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: |
            build
            node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-