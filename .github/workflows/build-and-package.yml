name: Build and Package

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: '要优化变更日志的tag（如v1.0.0）'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: 从 manifest.json 获取版本信息
      id: get_version
      run: |
        VERSION=$(jq -r '.version' manifest.json)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: 获取最新发布版本
      id: get_latest_release
      run: |
        LATEST_VERSION=$(curl -s https:,/api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name' || echo "0.0.0")
        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

    - name: 比较版本标签
      id: compare_versions
      run: |
        if [ "$(printf '%s\n' "$LATEST_VERSION" "$VERSION" | sort -rV | head -n1)" = "$VERSION" ]; then
            echo "new_version=true" >> $GITHUB_ENV
        else
            echo "new_version=false" >> $GITHUB_ENV
        fi

    - name: 检查标签是否存在
      id: check_tag
      run: |
        if git rev-parse "refs/tags/${{ env.VERSION }}" >/dev/null 2>&1; then
          echo "tag_exists=true" >> $GITHUB_ENV
        else
          echo "tag_exists=false" >> $GITHUB_ENV
        fi

    - name: 生成变更日志
      id: generate_changelog
      run: |
        if [ "${{ env.new_version }}" = "true" ] && [ "${{ env.tag_exists }}" = "false" ]; then
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"%h - %s")
          else
            CHANGELOG=$(git log --pretty=format:"%h - %s" $LAST_TAG..HEAD)
          fi
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="没有新的变更记录"
          fi
          CHANGELOG=$(echo "$CHANGELOG" | sed 's/ \([0-9a-f]\{7\} - \)/\n\1/g' | sed 's/\(fix\|add\|style\|update\)/\n\1/g')
          CHANGELOG=$(echo "$CHANGELOG" | jq -R -s '.')
          echo "CHANGELOG=$CHANGELOG" >> $GITHUB_ENV
        fi

    - name: 创建并提交 zip 包
      if: env.new_version == 'true' && env.tag_exists == 'false'
      run: |
        zip -r newtab-${{ env.VERSION }}.zip . -x ".*" -x "*/.*" -x "build/*" -x "README.md" -x ".github/*"
        mkdir -p build
        cp newtab-${{ env.VERSION }}.zip build/

    - name: 创建 Release
      if: env.new_version == 'true' && env.tag_exists == 'false'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: ${{ fromJson(env.CHANGELOG) }}
        draft: false
        prerelease: false

    - name: 上传 Release 资源
      if: env.new_version == 'true' && env.tag_exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/newtab-${{ env.VERSION }}.zip
        asset_name: newtab-${{ env.VERSION }}.zip
        asset_content_type: application/zip

    - name: 处理AI变更日志
      id: ai_changelog
      continue-on-error: true
      timeout-minutes: 60
      run: |
        # 设置通用参数
        MAX_RETRIES=3
        MAX_TOKENS=1500
        MAX_WAIT_MINUTES=60
        
        # 错峰时间检查函数,
        check_off_peak_time() {
          local hour=$(date -u +%H)
          local minute=$(date -u +%M)
          local time_in_minutes=$((hour * 60 + minute))
          local start_time=$((16 * 60 + 30))
          local end_time=$((24 * 60 + 30))
          if [ $time_in_minutes -ge $start_time ] || [ $time_in_minutes -le $((end_time - 24 * 60)) ]; then
            return 0
          else,
            if [ $time_in_minutes -lt $start_time ]; then
              echo $((start_time - time_in_minutes))
            else
              echo $((start_time + 24 * 60 - time_in_minutes))
            fi
            return 1
          fi
        }
        
        # 等待错峰时间函数
        wait_for_off_peak() {
          local minutes_to_wait
          if ! check_off_peak_time; then
            minutes_to_wait=$?
            if [ $minutes_to_wait -le $MAX_WAIT_MINUTES ]; then
              echo "⏳ 距离错峰时段还有 $minutes_to_wait 分钟，开始等待..."
              sleep $((minutes_to_wait * 60))
              echo "✅ 已进入错峰时段，开始生成AI变更日志"
              return 0
            else
              echo "⚠️ 距离错峰时段超过 $MAX_WAIT_MINUTES 分钟，将直接调用API"
              return 1
            fi
          else
            echo "✅ 当前已在错峰时段，开始生成AI变更日志"
            return 0
          fi
        }
        
        # 生成AI变更日志的函数
        generate_ai_changelog() {
          local original_content="$1"
          local ai_changelog=""
          
          # 检查输入内容
          if [ -z "$original_content" ]; then
            echo "::error::传入的原始变更日志内容为空"
            return 1
          fi
          
          # 记录输入内容长度
          echo "原始内容长度: $(echo "$original_content" | wc -c) 字符"
          
          # 转义原始内容以便安全地插入到JSON中
          local json_escaped_content=$(echo "$original_content" | jq -Rs '.')
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "尝试第 $i 次生成AI变更日志..."
            
            # 添加更详细的API请求日志
            echo "正在发送请求到DeepSeek API端点..."
            
            # 构建请求体并打印前200个字符用于调试
            local request_body="{
              \"model\": \"deepseek-chat\",
              \"messages\": [{\"role\": \"system\", \"content\": \"你是一个专业的软件发布日志编辑，请保持专业、简洁并引用原始提交ID\"}, {\"role\": \"user\", \"content\": \"将以下提交记录整理为结构化的发布日志，按功能新增、问题修复和改进优化分类。对每个变更都必须包含原始提交ID作为引用：${json_escaped_content:1:-1}\"}],
              \"max_tokens\": $MAX_TOKENS
            }"
            echo "请求体前200字符: ${request_body:0:200}..."
            
            # 保存完整的输出供调试使用
            echo "执行API调用..."
            echo "======== API请求开始 ========"
            local api_response_file=$(mktemp)
            local api_headers_file=$(mktemp)
            
            # 使用curl的-D选项将头信息保存到单独的文件
            curl -v -s -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.DEEPSEEK_API_KEY }}" \
              -d "$request_body" \
              -D "$api_headers_file" \
              https://api.deepseek.com/v1/chat/completions > "$api_response_file" 2> /tmp/curl_error.log
            
            local curl_status=$?
            
            echo "Curl命令退出状态: $curl_status"
            
            # 输出错误日志
            if [ -s /tmp/curl_error.log ]; then
              echo "Curl错误日志:"
              cat /tmp/curl_error.log
            fi
            
            # 输出响应头
            echo "API响应头:"
            cat "$api_headers_file"
            
            # 输出响应体(前1000个字符)
            echo "API响应体(前1000字符):"
            head -c 1000 "$api_response_file"
            echo ""
            echo "======== API请求结束 ========"
            
            # 记录curl命令执行状态
            if [ $curl_status -ne 0 ]; then
              echo "::error::curl命令执行失败，错误代码: $curl_status"
              cat /tmp/curl_error.log
              if [ $i -eq $MAX_RETRIES ]; then
                rm -f "$api_response_file" "$api_headers_file" /tmp/curl_error.log
                return $curl_status
              fi
              sleep 5
              continue
            fi
            
            # 提取HTTP状态码
            local http_status=$(grep -o 'HTTP/[0-9.]* [0-9]\{3\}' "$api_headers_file" | tail -1 | awk '{print $2}')
            echo "收到HTTP状态码: ${http_status:-未知}"
            
            # 检查HTTP状态码是否表示成功
            if [ "$http_status" != "200" ]; then
              echo "::warning::API返回非200状态码: $http_status"
              echo "响应详情:"
              cat "$api_response_file"
              
              if [ $i -eq $MAX_RETRIES ]; then
                echo "::error::在 $MAX_RETRIES 次尝试后API仍返回错误状态码"
                rm -f "$api_response_file" "$api_headers_file" /tmp/curl_error.log
                return 1
              fi
              
              sleep 5
              continue
            fi
            
            # 尝试解析响应为JSON
            if [ -s "$api_response_file" ] && jq '.' "$api_response_file" > /dev/null 2>&1; then
              echo "✅ 收到有效的JSON响应"
              ai_changelog=$(jq -r '.choices[0].message.content // empty' "$api_response_file")
            else
              echo "⚠️ 警告: 收到无效或非JSON响应"
              cat "$api_response_file"
              ai_changelog=""
            fi
            
            # 清理临时文件
            rm -f "$api_response_file" "$api_headers_file" /tmp/curl_error.log
            
            if [ ! -z "$ai_changelog" ]; then
              echo "✅ AI变更日志生成成功，内容长度: $(echo "$ai_changelog" | wc -c) 字符"
              echo "$ai_changelog"
              return 0
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "::error::尝试了 $MAX_RETRIES 次后AI变更日志生成失败"
              return 1
            else
              echo "⚠️ 第 $i 次尝试生成失败，等待5秒后重试..."
              sleep 5
            fi
          done
          
          # 如果代码执行到这里，表示所有重试都失败了但没有被前面的条件捕获
          echo "::error::在所有重试后未能生成有效的AI变更日志"
          return 1
        }
        
        # 等待错峰时间
        wait_for_off_peak
        
        # 根据触发方式执行不同的分支
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ ! -z "${{ inputs.tag }}" ]; then
          # 手动触发的分支
          echo "📝 处理手动指定的tag '${{ github.event.inputs.tag }}' 的变更日志"
          
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.tag }}")
          
          # 验证是否成功获取Release信息
          if [[ $(echo "$RELEASE_INFO" | jq -r 'has("id")') != "true" ]]; then
            echo "::error::无法获取tag '${{ github.event.inputs.tag }}' 的Release信息: $(echo "$RELEASE_INFO" | jq -r '.message // "未知错误"')"
            exit 1
          fi
          
          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id')
          echo "找到Release ID: $RELEASE_ID"
          
          ORIGINAL_CHANGELOG=$(echo "$RELEASE_INFO" | jq -r '.body')
          echo "获取到原始变更日志，长度: $(echo "$ORIGINAL_CHANGELOG" | wc -c) 字符"
          
          if [[ "$ORIGINAL_CHANGELOG" == *"[AI生成的变更日志摘要]"* ]]; then
            echo "⚠️ 此Release已包含AI生成的变更日志，跳过处理"
            exit 0
          fi
          
          echo "开始生成AI变更日志..."
          AI_CHANGELOG=$(generate_ai_changelog "$ORIGINAL_CHANGELOG")
          API_RESULT=$?
          
          # 检查API调用的返回状态
          if [ $API_RESULT -ne 0 ]; then
            echo "::error::DeepSeek API调用失败，错误代码: $API_RESULT"
            echo "::debug::跳过AI变更日志更新，保持原始变更日志不变"
            exit 1
          elif [ -z "$AI_CHANGELOG" ]; then
            echo "::error::未能获取有效的AI变更日志内容（内容为空）"
            exit 1
          fi
          
          echo "AI变更日志生成成功，长度: $(echo "$AI_CHANGELOG" | wc -c) 字符"
          NEW_BODY="## 版本 ${{ github.event.inputs.tag }} 更新摘要 [AI生成的变更日志摘要]\n\n${AI_CHANGELOG}\n\n## 原始提交记录\n\n${ORIGINAL_CHANGELOG}"
          
          echo "更新Release内容..."
          UPDATE_RESPONSE=$(curl -s -X PATCH \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": $(echo "$NEW_BODY" | jq -R -s '.')}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}")
            
          # 验证更新是否成功
          if [[ $(echo "$UPDATE_RESPONSE" | jq -r 'has("id")') != "true" ]]; then
            echo "::error::更新Release失败: $(echo "$UPDATE_RESPONSE" | jq -r '.message // "未知错误"')"
            exit 1
          fi
          
          echo "✅ 已成功更新 ${{ github.event.inputs.tag }} 的发布日志"
          
        elif [ "${{ env.new_version }}" == "true" ] && [ "${{ env.tag_exists }}" == "false" ]; then
          # 自动创建新版本的分支
          echo "📝 处理新版本 ${{ env.VERSION }} 的变更日志"
          
          # 修复这一行 - 移除额外的双引号
          ORIGINAL_CHANGELOG=$(echo $CHANGELOG | jq -r '.')
          AI_CHANGELOG=$(generate_ai_changelog "$ORIGINAL_CHANGELOG")
          
          if [ ! -z "$AI_CHANGELOG" ]; then
            # 为GitHub Actions输出准备变量
            AI_CHANGELOG="${AI_CHANGELOG//'%'/'%25'}"
            AI_CHANGELOG="${AI_CHANGELOG//$'\n'/'%0A'}"
            AI_CHANGELOG="${AI_CHANGELOG//$'\r'/'%0D'}"
            
            echo "ai_changelog=$AI_CHANGELOG" >> $GITHUB_OUTPUT
            echo "✅ AI变更日志已准备就绪，等待更新Release"
          else
            echo "::warning::未能获取有效的AI变更日志内容"
          fi
          
        else
          echo "⏭️ 不满足AI变更日志处理条件，跳过此步骤"
        fi

    - name: 更新Release内容
      if: env.new_version == 'true' && env.tag_exists == 'false' && steps.ai_changelog.outcome == 'success' && steps.ai_changelog.outputs.ai_changelog != ''
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT }}
        script: |
          const releaseId = ${{ steps.create_release.outputs.id }};
          const aiChangelog = `## 版本 ${{ env.VERSION }} 更新摘要 [AI生成的变更日志摘要]\n\n${{ steps.ai_changelog.outputs.ai_changelog }}\n\n## 原始提交记录\n\n${{ fromJson(env.CHANGELOG) }}`;
          
          try {
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: aiChangelog
            });
            console.log('✅ 已成功更新AI优化的发布日志');
          } catch (error) {
            console.log('⚠️ 更新发布日志失败:', error.message);
          }
