name: Edge商店自动提交

on:
  release:
    types: [published, edited]  # 监听发布和编辑事件
  # 手动触发选项
  workflow_dispatch:
    inputs:
      release_tag:
        description: "指定要提交的 Release 标签 (可选，默认使用最新 release)"
        required: false
        type: string

permissions:
  contents: read
  actions: read

jobs:
  check-release-status:
    name: 检查Release状态
    runs-on: ubuntu-latest
    outputs:
      should-submit: ${{ steps.check-status.outputs.should-submit }}
      release-tag: ${{ steps.check-status.outputs.release-tag }}
      download-url: ${{ steps.check-status.outputs.download-url }}    
    steps:
    - name: 检查Release是否为Latest
      id: check-status
      run: |
        # 获取触发事件的release信息
        if [ "${{ github.event_name }}" == "release" ]; then
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          IS_PRERELEASE="${{ github.event.release.prerelease }}"
          
          # 对于编辑事件，需要检查是否从预发布改为正式发布
          if [ "${{ github.event.action }}" == "edited" ]; then
            echo "🔄 检测到Release编辑事件"
            # 获取当前release的最新状态
            CURRENT_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG")
            IS_PRERELEASE=$(echo "$CURRENT_RELEASE" | jq -r '.prerelease')
            DOWNLOAD_URL=$(echo "$CURRENT_RELEASE" | jq -r '.assets[0].browser_download_url')
          else
            DOWNLOAD_URL="${{ github.event.release.assets[0].browser_download_url }}"
          fi
        else
          # 手动触发时，获取指定或最新的release
          if [ -n "${{ inputs.release_tag }}" ]; then
            RELEASE_TAG="${{ inputs.release_tag }}"
            RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG")
            IS_PRERELEASE=$(echo "$RELEASE_INFO" | jq -r '.prerelease')
            DOWNLOAD_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[0].browser_download_url')
          else
            # 获取最新的release
            LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
            IS_PRERELEASE=$(echo "$LATEST_RELEASE" | jq -r '.prerelease')
            DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[0].browser_download_url')
          fi
        fi
        
        echo "🔍 检查Release状态:"
        echo "- Release标签: $RELEASE_TAG"
        echo "- 是否预发布: $IS_PRERELEASE"
        echo "- 触发事件: ${{ github.event.action }}"
        echo "- 下载URL: $DOWNLOAD_URL"
        
        # 获取当前latest release
        LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/latest")
        LATEST_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
        
        echo "- 当前Latest: $LATEST_TAG"
        
        # 只有当这个release是latest且不是预发布时才提交
        if [ "$RELEASE_TAG" == "$LATEST_TAG" ] && [ "$IS_PRERELEASE" != "true" ]; then
          echo "✅ Release已成为Latest正式版本，准备提交到Edge商店"
          echo "should-submit=true" >> $GITHUB_OUTPUT
        else
          echo "⏭️ Release未成为Latest或仍为预发布，跳过提交"
          echo "- 条件检查: RELEASE_TAG=$RELEASE_TAG, LATEST_TAG=$LATEST_TAG, IS_PRERELEASE=$IS_PRERELEASE"
          echo "should-submit=false" >> $GITHUB_OUTPUT
        fi
        
        echo "release-tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        echo "download-url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT

  submit-to-edge-store:
    name: 提交到Edge商店
    runs-on: ubuntu-latest
    needs: check-release-status
    if: needs.check-release-status.outputs.should-submit == 'true'
    
    steps:
    - name: 检查必需的密钥
      run: |
        echo "🔍 检查Edge商店相关密钥..."
        
        if [ -z "${{ secrets.EDGE_STORE_ID }}" ]; then
          echo "❌ EDGE_STORE_ID 未配置"
          exit 1
        fi
        
        if [ -z "${{ secrets.EDGE_STORE_KEY }}" ]; then
          echo "❌ EDGE_STORE_KEY 未配置"
          exit 1
        fi
        
        echo "✅ Edge商店密钥检查通过"

    - name: 下载Release资源
      run: |
        echo "📥 下载扩展包..."
        DOWNLOAD_URL="${{ needs.check-release-status.outputs.download-url }}"
        
        if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" == "null" ]; then
          echo "❌ 无法获取下载URL"
          exit 1
        fi
        
        curl -L -o extension.zip "$DOWNLOAD_URL"
        
        # 验证下载的文件
        if [ ! -f "extension.zip" ]; then
          echo "❌ 扩展包下载失败"
          exit 1
        fi
        
        FILE_SIZE=$(ls -lh extension.zip | awk '{print $5}')
        echo "✅ 扩展包下载成功 (大小: $FILE_SIZE)"

    - name: 验证扩展包
      run: |
        echo "🔍 验证扩展包内容..."
        
        # 解压并检查关键文件
        unzip -q extension.zip -d temp_extract/
        
        if [ ! -f "temp_extract/manifest.json" ]; then
          echo "❌ 扩展包中缺少 manifest.json"
          exit 1
        fi
        
        # 读取版本信息
        VERSION=$(jq -r '.version' temp_extract/manifest.json)
        NAME=$(jq -r '.name' temp_extract/manifest.json)
        
        echo "✅ 扩展包验证成功:"
        echo "- 扩展名称: $NAME"
        echo "- 版本号: $VERSION"
        echo "- Release标签: ${{ needs.check-release-status.outputs.release-tag }}"
          # 清理临时文件
        rm -rf temp_extract/

    - name: 获取Edge商店访问令牌
      id: get-access-token
      run: |
        echo "🔑 获取Edge商店访问令牌..."
        
        # 获取访问令牌 - 使用表单编码格式
        TOKEN_RESPONSE=$(curl -s -X POST \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=${{ secrets.EDGE_STORE_ID }}&client_secret=${{ secrets.EDGE_STORE_KEY }}&scope=https://api.addons.microsoftedge.microsoft.com/.default&grant_type=client_credentials" \
          "https://login.microsoftonline.com/5c9eedce-81bc-42f3-8823-48ba6258b391/oauth2/v2.0/token")
        
        echo "认证响应: $TOKEN_RESPONSE"
        
        ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
        
        if [ "$ACCESS_TOKEN" == "null" ] || [ -z "$ACCESS_TOKEN" ]; then
          echo "❌ 获取访问令牌失败:"
          echo "$TOKEN_RESPONSE" | jq -r '.error_description // .error // "未知错误"'
          exit 1
        fi
        
        echo "✅ 访问令牌获取成功"
        echo "access-token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

    - name: 上传扩展包到Edge商店
      id: upload-package
      run: |
        echo "📤 上传扩展包到Edge商店..."
        
        ACCESS_TOKEN="${{ steps.get-access-token.outputs.access-token }}"
        PRODUCT_ID="lpdhbhkcbnhldcpcbocplhgeooabhbme"
        
        # 上传扩展包
        UPLOAD_RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/zip" \
          --data-binary @extension.zip \
          "https://api.addons.microsoftedge.microsoft.com/v1/products/$PRODUCT_ID/submissions/draft/package")
        
        echo "上传响应: $UPLOAD_RESPONSE"
        
        # 检查上传结果
        UPLOAD_STATUS=$(echo "$UPLOAD_RESPONSE" | jq -r '.status // "error"')
        
        if [ "$UPLOAD_STATUS" == "Succeeded" ] || [ "$UPLOAD_STATUS" == "InProgress" ]; then
          echo "✅ 扩展包上传成功"
          OPERATION_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.id')
          echo "operation-id=$OPERATION_ID" >> $GITHUB_OUTPUT
        else
          echo "❌ 扩展包上传失败:"
          echo "$UPLOAD_RESPONSE" | jq -r '.message // .error_description // "未知错误"'
          exit 1
        fi

    - name: 等待上传处理完成
      run: |
        echo "⏳ 等待上传处理完成..."
        
        ACCESS_TOKEN="${{ steps.get-access-token.outputs.access-token }}"
        PRODUCT_ID="lpdhbhkcbnhldcpcbocplhgeooabhbme"
        OPERATION_ID="${{ steps.upload-package.outputs.operation-id }}"
        
        # 最多等待5分钟
        for i in {1..30}; do
          echo "检查进度 ($i/30)..."
          
          STATUS_RESPONSE=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://api.addons.microsoftedge.microsoft.com/v1/products/$PRODUCT_ID/submissions/draft/package/operations/$OPERATION_ID")
          
          STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status // "unknown"')
          
          case "$STATUS" in
            "Succeeded")
              echo "✅ 上传处理完成"
              exit 0
              ;;
            "Failed")
              echo "❌ 上传处理失败:"
              echo "$STATUS_RESPONSE" | jq -r '.message // "未知错误"'
              exit 1
              ;;
            "InProgress")
              echo "⏳ 仍在处理中..."
              sleep 10
              ;;
            *)
              echo "⚠️ 未知状态: $STATUS"
              sleep 10
              ;;
          esac
        done
        
        echo "⏰ 处理超时，但不一定失败"

    - name: 提交审核
      run: |
        echo "📋 提交扩展包审核..."
        
        ACCESS_TOKEN="${{ steps.get-access-token.outputs.access-token }}"
        PRODUCT_ID="lpdhbhkcbnhldcpcbocplhgeooabhbme"
        
        # 提交审核
        SUBMIT_RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"notes": "自动提交 - Release ${{ needs.check-release-status.outputs.release-tag }}"}' \
          "https://api.addons.microsoftedge.microsoft.com/v1/products/$PRODUCT_ID/submissions")
        
        echo "提交响应: $SUBMIT_RESPONSE"
        
        # 检查提交结果
        SUBMIT_STATUS=$(echo "$SUBMIT_RESPONSE" | jq -r '.status // "error"')
        
        case "$SUBMIT_STATUS" in
          "InReview"|"Succeeded")
            echo "✅ 扩展包已提交审核"
            ;;
          *)
            echo "❌ 提交审核失败:"
            echo "$SUBMIT_RESPONSE" | jq -r '.message // .error_description // "未知错误"'
            # 不退出，因为上传可能已经成功
            ;;
        esac

    - name: 生成提交报告
      if: always()
      run: |
        echo "## 🏪 Edge商店提交报告" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 提交信息" >> $GITHUB_STEP_SUMMARY
        echo "| 项目 | 值 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
        echo "| Release标签 | \`${{ needs.check-release-status.outputs.release-tag }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| CRX编号 | \`lpdhbhkcbnhldcpcbocplhgeooabhbme\` |" >> $GITHUB_STEP_SUMMARY
        echo "| 提交时间 | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "### 🎉 提交状态" >> $GITHUB_STEP_SUMMARY
          echo "✅ **提交成功** - 扩展包已成功上传到Edge商店并提交审核" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📝 **后续步骤:**" >> $GITHUB_STEP_SUMMARY
          echo "- Microsoft会在1-7个工作日内完成审核" >> $GITHUB_STEP_SUMMARY
          echo "- 审核通过后扩展将自动发布到Edge商店" >> $GITHUB_STEP_SUMMARY
          echo "- 您可以在 [Edge合作伙伴中心](https://partner.microsoft.com/en-us/dashboard/microsoftedge/) 查看审核状态" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ 提交状态" >> $GITHUB_STEP_SUMMARY
          echo "❌ **提交失败** - 请检查日志了解详细错误信息" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **可能的解决方案:**" >> $GITHUB_STEP_SUMMARY
          echo "- 检查 EDGE_STORE_ID 和 EDGE_STORE_KEY 是否正确配置" >> $GITHUB_STEP_SUMMARY
          echo "- 确认扩展包格式正确且通过验证" >> $GITHUB_STEP_SUMMARY
          echo "- 查看Edge商店开发者控制台的错误信息" >> $GITHUB_STEP_SUMMARY
        fi

  workflow-summary:
    name: 工作流总结
    runs-on: ubuntu-latest
    needs: [check-release-status, submit-to-edge-store]
    if: always()
    steps:
    - name: 生成工作流执行总结
      run: |
        echo "## 🚀 Edge商店自动提交总结" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 执行状态" >> $GITHUB_STEP_SUMMARY
        echo "| 作业 | 状态 | 结果 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 检查Release状态 | ${{ needs.check-release-status.result }} | ${{ needs.check-release-status.result == 'success' && '✅ 成功' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 提交到Edge商店 | ${{ needs.submit-to-edge-store.result }} | ${{ needs.submit-to-edge-store.result == 'success' && '✅ 成功' || needs.submit-to-edge-store.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🎯 执行结果" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.check-release-status.outputs.should-submit }}" == "true" ]; then
          if [ "${{ needs.submit-to-edge-store.result }}" == "success" ]; then
            echo "🎉 **提交成功！**" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Release状态检查通过" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 扩展包下载成功" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 上传到Edge商店成功" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 提交审核成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **提交失败！**" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Release状态检查通过" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Edge商店提交过程中出现错误" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "ℹ️ **无需提交**" >> $GITHUB_STEP_SUMMARY
          echo "- Release未成为Latest或仍为预发布版本" >> $GITHUB_STEP_SUMMARY
          echo "- 只有Latest Release才会自动提交到Edge商店" >> $GITHUB_STEP_SUMMARY
        fi
